# 学习Tomcat之前的必备知识
### 1. Java编译基本知识
#### 1.1 JVM
##### JVM是class以及jar(实际上就是很多个class压缩在一起)的运行环境，特征就是java和javaw命令，通过这两个命令，你可以执行class和jar文件。你可以通过-classpath参数指定你需要加载的jar文件
#### 1.2 JDK
##### JDK就是JAVA的命令行开发环境，内置了JVM，特征就是javac命令，这个命令允许你将.java源文件批量或者单个编译成.class文件，从而可以通过JVM的java命令执行。在编译时你可以通过-classpath参数指定你的源代码依赖的jar文件。
#### 1.3 Tomcat等JEE中间件
##### JEE中间件主要是为了让JAVA程序能够提供http服务、向客户展现html及相关资源而准备的一个运行环境，通常已经包含了JDK（或者像tomcat一样需要配置JDK所在路径）.这个运行环境的特征是能够让你部署一个war包，运行环境能够自动加载WEB-INF/classes下的.class文件和WEB-INF/lib下jar文件。当用户通过浏览器访问中间件中你的war包所部署的路径时，中间件能够按照J2EE标准调用你的war包中的class和jsp页面，并将执行结果返回给浏览器。 在这种情况下你只需要将你的.java文件编译好放到WEB-INF/classes目录下。
### 2. JavaWEB项目
#### 2.1 分类
##### 纯jsp项目、jsp+JAVA辅助项目、JSP+Java项目
#### 2.2 JavaWEB项目运行
##### JavaWEB项目在运行的时候，需要将编译后的Java文件的内容放在classes目录下，将jar包放在lib目录下，然后在web.xml指导下运行
#### 文件目录层级如下
> - ROOT
>> - classes（通常所谓的classpath目录）*.class文件对应的目录文件结构
>> - lib 引用jar包的存放位置
>> - web.xml
### 一些说明
    1. 搞清楚web的目录文件结构以及classpath目录文件结构之后，就可以明确的知道自己java工程中的文件应该
    放在那里，然后按照文件夹的顺序去访问就能快速访问到对应的文件
    2. 所谓的eclipse和IDEA等开发工具就是按照一定的规则将src下的目录进行存放，然后tomcat就能够正确的访问文件的内容
    3. idea中每一次编写完毕之后并不会立即编译所有的文件，会另外起一个线程去扫描改动过的文件，然后将其记录在workspace.xml文件下，必要的时候进行编译运行。
#### src目录映射实例：
    build.properties内容：

    src=src
    build=build
    dist=dist

    build.xml内容如下

    <?xml version="1.0"?>
    <project name="MyProject" default="dist" basedir=".">
        <description>
            simple example build file
        </description>
      <!-- set global properties for this build -->
      <property file="${basedir}/build.properties"/>
      <target name="init">
        <!-- Create the time stamp -->
        <tstamp prefix="date">
    <format property="date_stamp" pattern="yyyy-MM-dd"  offset="0" unit="month"/>
    </tstamp>

        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
      </target>

      <target name="compile" depends="init"
            description="compile the source " >
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${build}"/>
      </target>

      <target name="dist" depends="compile"
            description="generate the distribution" >
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}/lib"/>

        <!-- Put everything in ${build} into the MyProject-20120627.jar file -->
        <jar jarfile="${dist}/lib/MyProject-${date.date_stamp}.jar" basedir="${build}"/>
      </target>

      <target name="clean"
            description="clean up" >
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
      </target>
    </project>

